const ArbitrageBot = require('../src/index');

async function runTests() {
  console.log('üß™ Iniciando testes do sistema de arbitragem...\n');

  try {
    // Criar inst√¢ncia do bot
    const bot = new ArbitrageBot();
    
    console.log('1Ô∏è‚É£ Testando inicializa√ß√£o...');
    const initialized = await bot.initialize();
    if (initialized) {
      console.log('‚úÖ Inicializa√ß√£o bem-sucedida\n');
    } else {
      console.log('‚ùå Falha na inicializa√ß√£o\n');
      return;
    }

    console.log('2Ô∏è‚É£ Testando coleta de dados de mercado...');
    const marketData = await bot.updateMarketData();
    if (marketData && marketData.processedPools.length > 0) {
      console.log(`‚úÖ Dados coletados: ${marketData.processedPools.length} pools\n`);
    } else {
      console.log('‚ùå Falha na coleta de dados\n');
      return;
    }

    console.log('3Ô∏è‚É£ Testando an√°lise de oportunidades...');
    const analysis = await bot.analyzeOpportunities(marketData);
    if (analysis) {
      console.log(`‚úÖ An√°lise conclu√≠da: ${analysis.total} oportunidades encontradas\n`);
    } else {
      console.log('‚ùå Falha na an√°lise\n');
      return;
    }

    console.log('4Ô∏è‚É£ Testando conectividade com blockchain...');
    const networkInfo = await bot.blockchainService.getNetworkInfo();
    if (networkInfo) {
      console.log(`‚úÖ Conectado √† rede: ${networkInfo.name} (Chain ID: ${networkInfo.chainId})\n`);
    } else {
      console.log('‚ùå Falha na conectividade com blockchain\n');
      return;
    }

    console.log('5Ô∏è‚É£ Testando obten√ß√£o de pre√ßo do g√°s...');
    const gasPrice = await bot.blockchainService.getGasPrice();
    if (gasPrice) {
      console.log(`‚úÖ Pre√ßo do g√°s: ${gasPrice.toString()} wei\n`);
    } else {
      console.log('‚ùå Falha ao obter pre√ßo do g√°s\n');
      return;
    }

    console.log('üéâ Todos os testes passaram com sucesso!');
    console.log('\nüìä Resumo dos testes:');
    console.log('   ‚úÖ Inicializa√ß√£o do sistema');
    console.log('   ‚úÖ Coleta de dados via Graph API');
    console.log('   ‚úÖ An√°lise de oportunidades');
    console.log('   ‚úÖ Conectividade com Polygon');
    console.log('   ‚úÖ Obten√ß√£o de dados de g√°s');
    
    console.log('\nüöÄ Sistema pronto para uso!');
    console.log('Execute "npm start" para iniciar o monitoramento cont√≠nuo.');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
    console.log('\nüîß Verifique:');
    console.log('   1. Se as vari√°veis de ambiente est√£o configuradas');
    console.log('   2. Se h√° conectividade com a internet');
    console.log('   3. Se as APIs est√£o funcionando');
  }
}

// Executar testes se for chamado diretamente
if (require.main === module) {
  runTests().catch(error => {
    console.error('‚ùå Erro fatal nos testes:', error);
    process.exit(1);
  });
}

module.exports = { runTests }; 